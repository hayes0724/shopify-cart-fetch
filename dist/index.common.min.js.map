{"version":3,"sources":["webpack://@hayes0724/shopify-cart-fetch/./src/lib/api.ts","webpack://@hayes0724/shopify-cart-fetch/./src/lib/functions.ts","webpack://@hayes0724/shopify-cart-fetch/./src/index.esm.ts","webpack://@hayes0724/shopify-cart-fetch/webpack/bootstrap","webpack://@hayes0724/shopify-cart-fetch/webpack/startup","webpack://@hayes0724/shopify-cart-fetch/webpack/runtime/define property getters","webpack://@hayes0724/shopify-cart-fetch/webpack/runtime/hasOwnProperty shorthand","webpack://@hayes0724/shopify-cart-fetch/webpack/runtime/make namespace object"],"names":["async","post","route","data","config","JSON","parse","stringify","method","credentials","headers","body","fetch","then","response","json","getState","addItem","items","addItemFromForm","productForm","formData","FormData","get","clearItems","updateItem","item","updateItemById","removeItem","quantity","getAttributes","state","attributes","updateAttributes","clearAttributes","clearList","Object","getOwnPropertyNames","forEach","prop","getNote","note","updateNote","clearNote","Cart","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","d","definition","key","o","defineProperty","enumerable","obj","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value"],"mappings":"wJAgCAA,eAAeC,EAAmBC,EAAkBC,GAClD,MAAMC,EAAS,IAnBRC,KAAKC,MACVD,KAAKE,UAAU,CACbC,OAAQ,OACRC,YAAa,cACbC,QAAS,CACP,mBAAoB,iBACpB,eAAgB,yBAmBtB,OAHIP,IACFC,EAAOO,KAAON,KAAKE,UAAUJ,UAElBS,MAAMV,EAAO,IAAIE,IAC3BS,MAAMC,GAAaA,EAASC,SAC5BF,MAAME,GAA0BA,ICzB9Bf,eAAegB,IACpB,aAAaJ,MAAM,YAChBC,MAAMC,GAAaA,EAASC,SAC5BF,MAAME,GAASA,IAUbf,eAAeiB,EAAQC,GAC5B,aAAajB,EAAK,eAAgBiB,GAU7BlB,eAAemB,EACpBC,GAEA,MAAMC,EAAW,IAAIC,SAASF,GAC9B,IAAKC,EAASE,IAAI,MAChB,KAAM,yCAER,aAAatB,EAAK,eAAgBoB,GAQ7BrB,eAAewB,IACpB,aAAavB,EAAK,kBAUbD,eAAeyB,EAAWC,GAC/B,aAAazB,EAAK,kBAAmByB,GAUhC1B,eAAe2B,EACpBD,GAEA,aAAazB,EAAK,kBAAmByB,GAUhC1B,eAAe4B,EAAWF,GAC/B,aAAazB,EAAK,kBAAmB,CAAE4B,SAAU,KAAMH,IAQlD1B,eAAe8B,IACpB,OAAOd,IAAWH,MAAMkB,GAAUA,EAAMC,aASnChC,eAAeiC,EACpBD,GAEA,aAAa/B,EAAK,kBAAmB,CAAE+B,WAAY,IAAKA,KAQnDhC,eAAekC,IACpB,OAAOlB,IACJH,MAAMkB,GAAUA,EAAMC,aACtBnB,MAAMmB,IACL,MAAMG,EAAwB,GAI9B,OAHAC,OAAOC,oBAAoBL,GAAYM,SACpCC,GAAUJ,EAAUI,GAAQ,KAExBJ,KAERtB,MAAMsB,GAAclC,EAAK,kBAAmB,CAAE+B,WAAYG,MAQxDnC,eAAewC,IACpB,OAAOxB,IAAWH,MAAMkB,GAAUA,EAAMU,OASnCzC,eAAe0C,EAAWD,GAC/B,aAAaxC,EAAK,kBAAmB,CAAEwC,KAAMA,IAQxCzC,eAAe2C,IACpB,aAAa1C,EAAK,kBAAmB,CAAEwC,KAAM,K,sQC/HxC,MAAMG,EAAb,cAES,KAAA5B,SAAWA,EACX,KAAAC,QAAUA,EACV,KAAAE,gBAAkBA,EAClB,KAAAK,WAAaA,EACb,KAAAI,WAAaA,EACb,KAAAH,WAAaA,EACb,KAAAE,eAAiBA,EACjB,KAAAG,cAAgBA,EAChB,KAAAG,iBAAmBA,EACnB,KAAAC,gBAAkBA,EAClB,KAAAM,QAAUA,EACV,KAAAE,WAAaA,EACb,KAAAC,UAAYA,MC5CjBE,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUC,QAG3C,IAAIC,EAASJ,EAAyBE,GAAY,CAGjDC,QAAS,IAOV,OAHAE,EAAoBH,GAAUE,EAAQA,EAAOD,QAASF,GAG/CG,EAAOD,QCjBf,OCFAF,EAAoBK,EAAI,CAACH,EAASI,KACjC,IAAI,IAAIC,KAAOD,EACXN,EAAoBQ,EAAEF,EAAYC,KAASP,EAAoBQ,EAAEN,EAASK,IAC5EjB,OAAOmB,eAAeP,EAASK,EAAK,CAAEG,YAAY,EAAMjC,IAAK6B,EAAWC,MCJ3EP,EAAoBQ,EAAI,CAACG,EAAKlB,IAASH,OAAOsB,UAAUC,eAAeC,KAAKH,EAAKlB,GCCjFO,EAAoBe,EAAKb,IACH,oBAAXc,QAA0BA,OAAOC,aAC1C3B,OAAOmB,eAAeP,EAASc,OAAOC,YAAa,CAAEC,MAAO,WAE7D5B,OAAOmB,eAAeP,EAAS,aAAc,CAAEgB,OAAO,KHFhDlB,EAAoB,M","file":"index.common.min.js","sourcesContent":["/**\n * Cart API helper methods\n * ------------------------------------------------------------------------------\n * Reusable code for cart API methods\n *\n */\n\nimport { CartRoute } from \"./types\";\n\n/**\n * Creates the default config for post requests\n * @return {JSON}\n */\nfunction defaultRequestConfig() {\n  return JSON.parse(\n    JSON.stringify({\n      method: \"POST\",\n      credentials: 'same-origin',\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json;'\n      }\n    })\n  );\n}\n\n/**\n * The default method for fetching JSON\n * @param {string} route\n * @param {Data?} data\n * @return {Promise<Return>}\n */\nasync function post<Data, Return>(route: CartRoute, data?: Data): Promise<Return> {\n  const config = {\n    ...defaultRequestConfig()\n  }\n  if (data) {\n    config.body = JSON.stringify(data)\n  }\n  return await fetch(route, {...config})\n    .then((response) => response.json())\n    .then((json: Promise<Return>) => json);\n}\n\nexport {\n  post\n}\n","import {\n  Attributes,\n  CartItemAdd,\n  CartItemRemove,\n  CartItemUpdate,\n  CartItemUpdateById,\n  CartLineItem,\n  CartState\n} from \"./types\";\nimport {post} from \"./api\";\n\n/**\n * Use the GET /cart.js endpoint to get the cart as JSON.\n * @see {@link https://shopify.dev/docs/themes/ajax-api/reference/cart#get-cart-js | ShopifyAPI: GET /cart.js }\n * @return {Promise<CartState>}\n */\nexport async function getState(): Promise<CartState> {\n  return await fetch(\"/cart.js\")\n    .then((response) => response.json())\n    .then((json) => json);\n}\n\n/**\n * Use the POST /cart/add.js endpoint to add product to cart.\n * @typedef {function} addItem\n * @see {@link https://shopify.dev/docs/themes/ajax-api/reference/cart#post-cart-add-js | ShopifyAPI: POST /cart/add.js}\n * @param {CartItemAdd} items\n * @return {Promise<CartLineItem>}\n */\nexport async function addItem(items: CartItemAdd): Promise<CartLineItem> {\n  return await post(\"/cart/add.js\", items);\n}\n\n/**\n * Adds an item to your cart from a product form. The form must contain an input with name=\"id\".\n * If the quantity specified is more than what is available, the promise will be rejected and the cart state will remain unchanged\n * @param {HTMLFormElement} productForm\n * @return {Promise<CartLineItem>}\n * @see {@link https://shopify.dev/docs/themes/ajax-api/reference/cart#post-cart-add-js | ShopifyAPI: POST /cart/add.js}\n */\nexport async function addItemFromForm(\n  productForm: HTMLFormElement\n): Promise<CartLineItem> {\n  const formData = new FormData(productForm);\n  if (!formData.get(\"id\")) {\n    throw \"Cart form missing required property ID\";\n  }\n  return await post(\"/cart/add.js\", formData);\n}\n\n/**\n * Use the POST /cart/clear.js endpoint to set all quantities of all line items in the cart to zero.\n * @see {@link https://shopify.dev/docs/themes/ajax-api/reference/cart#post-cart-clear-js | ShopifyAPI: POST /cart/clear.js}\n * @return {Promise<CartState>}\n */\nexport async function clearItems(): Promise<CartState> {\n  return await post(\"/cart/clear.js\");\n}\n\n/**\n * The /cart/change.js endpoint changes the quantity and properties object of a cart line item.\n * Only items already in your cart can be changed, and only one line item at a time can be changed.\n * @see {@link https://shopify.dev/docs/themes/ajax-api/reference/cart#post-cart-change-js | ShopifyAPI: POST /cart/change.js }\n * @param {CartItemUpdate} item\n * @return {Promise<CartState>}\n */\nexport async function updateItem(item: CartItemUpdate): Promise<CartState> {\n  return await post(\"/cart/change.js\", item);\n}\n\n/**\n * The /cart/change.js endpoint changes the quantity.\n * Only items already in your cart can be changed, and only one line item at a time can be changed.\n * @see {@link https://shopify.dev/docs/themes/ajax-api/reference/cart#post-cart-change-js | ShopifyAPI: POST /cart/change.js }\n * @param {CartItemUpdateById} item\n * @return {Promise<CartState>}\n */\nexport async function updateItemById(\n  item: CartItemUpdateById\n): Promise<CartState> {\n  return await post(\"/cart/change.js\", item);\n}\n\n/**\n * Removes an item from the cart using line item key or product id. Returns a promise which fulfills with the updated cart state.\n * @param {CartItemRemove} item\n * @see {@link https://shopify.dev/docs/themes/ajax-api/reference/cart#post-cart-change-js | ShopifyAPI: POST /cart/change.js }\n * @see {@link https://shopify.dev/docs/themes/liquid/reference/objects/line_item#line_item-key | ShopifyAPI: LineItemKey }\n * @return {Promise<CartState>}\n */\nexport async function removeItem(item: CartItemRemove): Promise<CartState> {\n  return await post(\"/cart/change.js\", { quantity: 0, ...item });\n}\n\n/**\n * Get the current cart state from Shopify and return the attributes\n * @return {Promise<CartState[\"attributes\"]>}\n * @see {@link https://shopify.dev/docs/themes/liquid/reference/objects/cart#cart-attributes | ShopifyAPI: cart-attributes }\n */\nexport async function getAttributes(): Promise<CartState[\"attributes\"]> {\n  return getState().then((state) => state.attributes);\n}\n\n/**\n * Update cart attributes from Shopify and return the state\n * @param {Attributes} attributes\n * @return {Promise<CartState>}\n * @see {@link https://shopify.dev/docs/themes/liquid/reference/objects/cart#cart-attributes | ShopifyAPI: cart-attributes }\n */\nexport async function updateAttributes(\n  attributes: Attributes\n): Promise<CartState> {\n  return await post(\"/cart/update.js\", { attributes: { ...attributes } });\n}\n\n/**\n * Clear all cart attributes from Shopify and return the state\n * @return {Promise<CartState>}\n * @see {@link https://shopify.dev/docs/themes/liquid/reference/objects/cart#cart-attributes | ShopifyAPI: cart-attributes }\n */\nexport async function clearAttributes(): Promise<CartState> {\n  return getState()\n    .then((state) => state.attributes)\n    .then((attributes) => {\n      const clearList: Attributes = {};\n      Object.getOwnPropertyNames(attributes).forEach(\n        (prop) => (clearList[prop] = \"\")\n      );\n      return clearList;\n    })\n    .then((clearList) => post(\"/cart/update.js\", { attributes: clearList }));\n}\n\n/**\n * Get the current cart state from Shopify and return the note\n * @return {Promise<CartState[\"note\"]>}\n * @see {@link https://shopify.dev/docs/themes/liquid/reference/objects/cart#cart-note | ShopifyAPI: cart.note }\n */\nexport async function getNote(): Promise<CartState[\"note\"]> {\n  return getState().then((state) => state.note);\n}\n\n/**\n * Update or create the cart note\n * @param {string} note\n * @return {Promise<CartState>}\n * @see {@link https://shopify.dev/docs/themes/liquid/reference/objects/cart#cart-note | ShopifyAPI: cart.note }\n */\nexport async function updateNote(note: string): Promise<CartState> {\n  return await post(\"/cart/update.js\", { note: note });\n}\n\n/**\n * Remove the cart note\n * @return {Promise<CartState>}\n * @see {@link https://shopify.dev/docs/themes/liquid/reference/objects/cart#cart-note | ShopifyAPI: cart.note }\n */\nexport async function clearNote(): Promise<CartState> {\n  return await post(\"/cart/update.js\", { note: \"\" });\n}\n","import {\n  addItem,\n  getState,\n  addItemFromForm,\n  clearItems,\n  removeItem,\n  updateAttributes,\n  updateItem,\n  updateItemById,\n  getAttributes,\n  clearAttributes,\n  getNote,\n  updateNote,\n  clearNote,\n} from \"./lib/functions\";\nimport { CartState } from \"./lib/types\";\n\n/**\n * Cart API\n * ------------------------------------------------------------------------------\n * The Cart class with all methods. You can also import the functions individually\n *\n * @example\n * import Cart from '@hayes0724/shopify-cart-fetch';\n * const shopifyCart = new Cart();\n * shopifyCart.getState().then(state => console.log(state))\n * @example\n * import {getState, removeItem, updateItem, addItem, clearItems} from '@hayes0724/shopify-cart-fetch'\n * getState().then(state => console.log(state))\n *\n */\nexport class Cart {\n  public state?: CartState;\n  public getState = getState;\n  public addItem = addItem;\n  public addItemFromForm = addItemFromForm;\n  public clearItems = clearItems;\n  public removeItem = removeItem;\n  public updateItem = updateItem;\n  public updateItemById = updateItemById;\n  public getAttributes = getAttributes;\n  public updateAttributes = updateAttributes;\n  public clearAttributes = clearAttributes;\n  public getNote = getNote;\n  public updateNote = updateNote;\n  public clearNote = clearNote;\n}\n\nexport {\n  addItem,\n  getState,\n  addItemFromForm,\n  clearItems,\n  removeItem,\n  updateAttributes,\n  updateItem,\n  updateItemById,\n  getAttributes,\n  clearAttributes,\n  getNote,\n  updateNote,\n  clearNote,\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(698);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}