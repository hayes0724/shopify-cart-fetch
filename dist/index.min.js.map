{"version":3,"sources":["webpack://@hayes0724/shopify-cart-fetch/webpack/universalModuleDefinition","webpack://@hayes0724/shopify-cart-fetch/./src/lib/events.ts","webpack://@hayes0724/shopify-cart-fetch/./src/lib/api.ts","webpack://@hayes0724/shopify-cart-fetch/./src/lib/functions.ts","webpack://@hayes0724/shopify-cart-fetch/./src/index.esm.ts","webpack://@hayes0724/shopify-cart-fetch/webpack/bootstrap","webpack://@hayes0724/shopify-cart-fetch/webpack/startup","webpack://@hayes0724/shopify-cart-fetch/webpack/runtime/define property getters","webpack://@hayes0724/shopify-cart-fetch/webpack/runtime/hasOwnProperty shorthand","webpack://@hayes0724/shopify-cart-fetch/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","a","i","self","CartEvents","bus","DocumentFragment","this","type","stage","data","CustomEvent","detail","event","handler","addEventListener","dispatchEvent","publish","async","post","route","config","JSON","parse","stringify","method","credentials","headers","body","fetch","then","response","json","getState","addItem","items","addItemFromForm","productForm","formData","FormData","get","clearItems","updateItem","item","updateItemById","removeItem","quantity","getAttributes","state","attributes","updateAttributes","clearAttributes","clearList","Object","getOwnPropertyNames","forEach","prop","getNote","note","updateNote","clearNote","Cart","events","findItem","key","find","findItemIndex","findIndex","run","runLine","_state","value","callback","emit","lineItem","index","push","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","d","definition","o","defineProperty","enumerable","obj","prototype","hasOwnProperty","call","r","Symbol","toStringTag"],"mappings":"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","file":"index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function() {\nreturn ","/**\n * Events\n * ------------------------------------------------------------------------------\n *\n */\n\nimport {EventType, EventStage, EventData} from \"./types\";\n\nexport default class CartEvents {\n\n  public bus: EventTarget\n\n  constructor(bus: EventTarget = new DocumentFragment()) {\n    this.bus = bus\n  }\n\n  static publish(\n    type: EventType,\n    stage: EventStage,\n    data?: CustomEvent[\"detail\"]\n  ): CustomEvent<unknown> {\n    return new CustomEvent(`${type}:${stage}`, {\n      detail: data,\n    });\n  }\n\n  on(event: string, handler: EventListener): void {\n    this.bus.addEventListener(event, handler)\n  }\n\n  emit(type: EventType, stage: EventStage, data?: EventData): void {\n    this.bus.dispatchEvent(CartEvents.publish(type, stage, data))\n  }\n}\n","/**\n * Cart API helper methods\n * ------------------------------------------------------------------------------\n * Reusable code for cart API methods\n *\n */\n\nimport { CartRoute } from \"./types\";\n\n/**\n * Creates the default config for post requests\n * @return {JSON}\n */\nfunction defaultRequestConfig() {\n  return JSON.parse(\n    JSON.stringify({\n      method: \"POST\",\n      credentials: 'same-origin',\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json;'\n      }\n    })\n  );\n}\n\n/**\n * The default method for fetching JSON\n * @param {string} route\n * @param {Data?} data\n * @return {Promise<Return>}\n */\nasync function post<Data, Return>(route: CartRoute, data?: Data): Promise<Return> {\n  const config = {\n    ...defaultRequestConfig()\n  }\n  if (data) {\n    config.body = JSON.stringify(data)\n  }\n  return await fetch(route, {...config})\n    .then((response) => response.json())\n    .then((json: Promise<Return>) => json);\n}\n\nexport {\n  post\n}\n","import {\n  Attributes,\n  CartItemAdd,\n  CartItemRemove,\n  CartItemUpdate,\n  CartItemUpdateById,\n  CartLineItem,\n  CartState\n} from \"./types\";\nimport {post} from \"./api\";\n\n/**\n * Use the GET /cart.js endpoint to get the cart as JSON.\n * @see {@link https://shopify.dev/docs/themes/ajax-api/reference/cart#get-cart-js | ShopifyAPI: GET /cart.js }\n * @return {Promise<CartState>}\n */\nexport async function getState(): Promise<CartState> {\n  return await fetch(\"/cart.js\")\n    .then((response) => response.json())\n    .then((json) => json);\n}\n\n/**\n * Use the POST /cart/add.js endpoint to add product to cart.\n * @typedef {function} addItem\n * @see {@link https://shopify.dev/docs/themes/ajax-api/reference/cart#post-cart-add-js | ShopifyAPI: POST /cart/add.js}\n * @param {CartItemAdd} items\n * @return {Promise<CartLineItem>}\n */\nexport async function addItem(items: CartItemAdd): Promise<CartLineItem> {\n  return await post(\"/cart/add.js\", items);\n}\n\n/**\n * Adds an item to your cart from a product form. The form must contain an input with name=\"id\".\n * If the quantity specified is more than what is available, the promise will be rejected and the cart state will remain unchanged\n * @param {HTMLFormElement} productForm\n * @return {Promise<CartLineItem>}\n * @see {@link https://shopify.dev/docs/themes/ajax-api/reference/cart#post-cart-add-js | ShopifyAPI: POST /cart/add.js}\n */\nexport async function addItemFromForm(\n  productForm: HTMLFormElement\n): Promise<CartLineItem> {\n  const formData = new FormData(productForm);\n  if (!formData.get(\"id\")) {\n    throw \"Cart form missing required property ID\";\n  }\n  return await post(\"/cart/add.js\", formData);\n}\n\n/**\n * Use the POST /cart/clear.js endpoint to set all quantities of all line items in the cart to zero.\n * @see {@link https://shopify.dev/docs/themes/ajax-api/reference/cart#post-cart-clear-js | ShopifyAPI: POST /cart/clear.js}\n * @return {Promise<CartState>}\n */\nexport async function clearItems(): Promise<CartState> {\n  return await post(\"/cart/clear.js\");\n}\n\n/**\n * The /cart/change.js endpoint changes the quantity and properties object of a cart line item.\n * Only items already in your cart can be changed, and only one line item at a time can be changed.\n * @see {@link https://shopify.dev/docs/themes/ajax-api/reference/cart#post-cart-change-js | ShopifyAPI: POST /cart/change.js }\n * @param {CartItemUpdate} item\n * @return {Promise<CartLineItem>}\n */\nexport async function updateItem(item: CartItemUpdate): Promise<CartLineItem> {\n  return await post(\"/cart/change.js\", item);\n}\n\n/**\n * The /cart/change.js endpoint changes the quantity.\n * Only items already in your cart can be changed, and only one line item at a time can be changed.\n * @see {@link https://shopify.dev/docs/themes/ajax-api/reference/cart#post-cart-change-js | ShopifyAPI: POST /cart/change.js }\n * @param {CartItemUpdateById} item\n * @return {Promise<CartLineItem>}\n */\nexport async function updateItemById(\n  item: CartItemUpdateById\n): Promise<CartLineItem> {\n  return await post(\"/cart/change.js\", item);\n}\n\n/**\n * Removes an item from the cart using line item key or product id. Returns a promise which fulfills with the updated cart state.\n * @param {CartItemRemove} item\n * @see {@link https://shopify.dev/docs/themes/ajax-api/reference/cart#post-cart-change-js | ShopifyAPI: POST /cart/change.js }\n * @see {@link https://shopify.dev/docs/themes/liquid/reference/objects/line_item#line_item-key | ShopifyAPI: LineItemKey }\n * @return {Promise<CartLineItem>}\n */\nexport async function removeItem(item: CartItemRemove): Promise<CartLineItem> {\n  return await post(\"/cart/change.js\", { quantity: 0, ...item });\n}\n\n/**\n * Get the current cart state from Shopify and return the attributes\n * @return {Promise<CartState[\"attributes\"]>}\n * @see {@link https://shopify.dev/docs/themes/liquid/reference/objects/cart#cart-attributes | ShopifyAPI: cart-attributes }\n */\nexport async function getAttributes(): Promise<CartState[\"attributes\"]> {\n  return getState().then((state) => state.attributes);\n}\n\n/**\n * Update cart attributes from Shopify and return the state\n * @param {Attributes} attributes\n * @return {Promise<CartState>}\n * @see {@link https://shopify.dev/docs/themes/liquid/reference/objects/cart#cart-attributes | ShopifyAPI: cart-attributes }\n */\nexport async function updateAttributes(\n  attributes: Attributes\n): Promise<CartState> {\n  return await post(\"/cart/update.js\", { attributes: { ...attributes } });\n}\n\n/**\n * Clear all cart attributes from Shopify and return the state\n * @return {Promise<CartState>}\n * @see {@link https://shopify.dev/docs/themes/liquid/reference/objects/cart#cart-attributes | ShopifyAPI: cart-attributes }\n */\nexport async function clearAttributes(): Promise<CartState> {\n  return getState()\n    .then((state) => state.attributes)\n    .then((attributes) => {\n      const clearList: Attributes = {};\n      Object.getOwnPropertyNames(attributes).forEach(\n        (prop) => (clearList[prop] = \"\")\n      );\n      return clearList;\n    })\n    .then((clearList) => post(\"/cart/update.js\", { attributes: clearList }));\n}\n\n/**\n * Get the current cart state from Shopify and return the note\n * @return {Promise<CartState[\"note\"]>}\n * @see {@link https://shopify.dev/docs/themes/liquid/reference/objects/cart#cart-note | ShopifyAPI: cart.note }\n */\nexport async function getNote(): Promise<CartState[\"note\"]> {\n  return getState().then((state) => state.note);\n}\n\n/**\n * Update or create the cart note\n * @param {string} note\n * @return {Promise<CartState>}\n * @see {@link https://shopify.dev/docs/themes/liquid/reference/objects/cart#cart-note | ShopifyAPI: cart.note }\n */\nexport async function updateNote(note: string): Promise<CartState> {\n  return await post(\"/cart/update.js\", { note: note });\n}\n\n/**\n * Remove the cart note\n * @return {Promise<CartState>}\n * @see {@link https://shopify.dev/docs/themes/liquid/reference/objects/cart#cart-note | ShopifyAPI: cart.note }\n */\nexport async function clearNote(): Promise<CartState> {\n  return await post(\"/cart/update.js\", { note: \"\" });\n}\n","/**\n * Cart\n * ------------------------------------------------------------------------------\n * The default Cart class with all methods, events and state\n */\n\nimport CartEvents from \"./lib/events\";\nimport {\n  addItem,\n  addItemFromForm,\n  clearAttributes,\n  clearItems,\n  clearNote,\n  getAttributes,\n  getNote,\n  getState,\n  removeItem,\n  updateAttributes,\n  updateItem,\n  updateItemById,\n  updateNote,\n} from \"./lib/functions\";\nimport {\n  CartItemParams,\n  CartItemAdd,\n  CartItemRemove,\n  //CartItemUpdate,\n  CartItemIndex,\n  CartLineItem,\n  CartState,\n  EventType,\n  LineItemKey,\n  LineItemCallback,\n  CartItemUpdate,\n  CartItemUpdateById,\n  Attributes,\n  CartParams,\n} from \"./lib/types\";\n\n/**\n * This class implements all methods from functions.ts, uses events.ts for cart events and maintains cart state.\n * You can also import the functions individually or create your own cart class.\n *\n * @example\n * import Cart from '@hayes0724/shopify-cart-fetch';\n * const shopifyCart = new Cart();\n * shopifyCart.getState().then(state => console.log(state))\n * @example\n * import {getState, removeItem, updateItem, addItem, clearItems} from '@hayes0724/shopify-cart-fetch'\n * getState().then(state => console.log(state))\n *\n */\nexport default class Cart {\n  get state(): CartState {\n    return this._state;\n  }\n\n  set state(value: CartState) {\n    this._state = value;\n  }\n\n  private _state?: CartState;\n\n  private async run(\n    type: EventType,\n    callback: CallableFunction,\n    data?: CartParams\n  ): Promise<CartState> {\n    this.events.emit(type, \"start\");\n    this.state = await callback(data);\n    this.events.emit(type, \"complete\", this.state);\n    return this.state;\n  }\n\n  private async runLine(\n    type: EventType,\n    callback: LineItemCallback,\n    data?: CartItemParams\n  ): Promise<CartLineItem> {\n    this.events.emit(type, \"start\");\n    const lineItem = await callback(data);\n    const index = this.findItemIndex(lineItem.key);\n    index > -1 && lineItem.quantity > 0\n      ? (this.state.items[index] = lineItem)\n      : this.state.items.push(lineItem);\n    this.events.emit(type, \"complete\", this.state);\n    return lineItem;\n  }\n\n  public events = new CartEvents();\n\n  /**\n   * Finds the the line item using it's line item key\n   * @param {LineItemKey} key\n   * @return {CartLineItem}\n   */\n  public findItem = (key: LineItemKey): CartLineItem =>\n    this.state.items.find((item) => item.key === key);\n\n  /**\n   * Finds the index of the line item using it's line item key\n   * @param {LineItemKey} key\n   * @return {CartItemIndex}\n   */\n  public findItemIndex = (key: LineItemKey): CartItemIndex =>\n    this.state.items.findIndex((item) => item.key === key);\n\n  public getState = async (): Promise<CartState> =>\n    this.run(\"cart-fetch\", getState);\n\n  public addItem = async (items: CartItemAdd): Promise<CartLineItem> =>\n    this.runLine(\"cart-add\", addItem, items);\n\n  public addItemFromForm = async (\n    productForm: HTMLFormElement\n  ): Promise<CartLineItem> =>\n    this.runLine(\"cart-add\", addItemFromForm, productForm);\n\n  public clearItems = async (): Promise<CartState> =>\n    this.run(\"cart-update\", clearItems);\n\n  public removeItem = async (item: CartItemRemove): Promise<CartLineItem> =>\n    this.runLine(\"cart-remove\", removeItem, item);\n\n  public updateItem = async (item: CartItemUpdate): Promise<CartLineItem> =>\n    this.runLine(\"cart-update\", updateItem, item);\n\n  public updateItemById = async (\n    item: CartItemUpdateById\n  ): Promise<CartLineItem> => this.runLine(\"cart-update\", updateItemById, item);\n\n  public updateAttributes = async (\n    attributes: Attributes\n  ): Promise<CartState> =>\n    this.run(\"cart-update\", updateAttributes, attributes);\n\n  public clearAttributes = async (): Promise<CartState> =>\n    this.run(\"cart-update\", clearAttributes);\n\n  public getAttributes: () => Promise<CartState[\"attributes\"]> = getAttributes;\n\n  public getNote: () => Promise<CartState[\"note\"]> = getNote;\n\n  public updateNote = async (note: string): Promise<CartState> =>\n    this.run(\"cart-update\", updateNote, note);\n\n  public clearNote = async (): Promise<CartState> =>\n    this.run(\"cart-update\", clearNote);\n}\n\nexport {\n  addItem,\n  getState,\n  addItemFromForm,\n  clearItems,\n  removeItem,\n  updateAttributes,\n  updateItem,\n  updateItemById,\n  getAttributes,\n  clearAttributes,\n  getNote,\n  updateNote,\n  clearNote,\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(488);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}